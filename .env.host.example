# Example environment for deploying the Codex SSH bastion.
#
# Usage:
#   set -a
#   source .env.host.example
#   set +a
#   scripts/deploy-ssh-bastion.sh
#
# Override only what you need. Values here mirror the defaults in
# scripts/deploy-ssh-bastion.sh and README instructions.

# Kubernetes namespace for all bastion resources.
SSH_NAMESPACE=codex-ssh

# Kubernetes object names.
SSH_DEPLOYMENT_NAME=ssh-bastion
SSH_SERVICE_NAME=ssh-bastion

# Service exposure settings. Keep the NodePort in sync with the port that
# KeenDNS (or another external balancer) forwards to on the node.
SSH_SERVICE_TYPE=NodePort
SSH_SERVICE_NODE_PORT=32222

# Optionally pin the pod to a specific Kubernetes node.
# SSH_NODE_NAME=<node-name>

# Persistent volume claim configuration.
SSH_PVC_NAME=codex-ssh-data
SSH_PVC_SIZE=1Gi
# SSH_STORAGE_CLASS=<cluster-default-storage-class>

# Storage backend for bastion data. "auto" picks hostPath when SSH_HOSTPATH_PATH is set.
SSH_STORAGE_TYPE=auto
# SSH_HOSTPATH_PATH=/srv/codex-ssh

# ConfigMap and secret names used by the deployment.
SSH_CONFIGMAP_NAME=ssh-bastion-config
SSH_AUTHORIZED_SECRET=ssh-authorized-keys

# Container image location. Provide SSH_IMAGE_REGISTRY when the image is
# stored in a private registry (for example ghcr.io/<org>). Leave it empty to
# use the local name below.
# SSH_IMAGE_REGISTRY=ghcr.io/<org>
SSH_BASTION_IMAGE=codex-ssh-bastion:latest

# Optional message of the day displayed to SSH users after login.
# SSH_MOTD_CONTENT="Codex SSH bastion
# Используйте codex-hostctl list, чтобы увидеть найденные цели."

# Path to the public keys that should populate authorized_keys. When set, the
# deployment script will recreate the Kubernetes secret automatically.
# SSH_AUTHORIZED_KEYS_FILE=./authorized_keys

# Control automatic key generation for the Codex workspace secret.
# SSH_GENERATE_WORKSPACE_KEY=auto
# SSH_WORKSPACE_KEY_TYPE=ed25519
# SSH_WORKSPACE_KEY_COMMENT=codex@workspace
